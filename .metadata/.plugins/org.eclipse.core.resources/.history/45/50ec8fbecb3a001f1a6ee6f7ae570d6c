package com.agri.service;

import com.agri.dto.AgripreneurRegistrationDto;
import com.agri.model.Agripreneur;
import com.agri.model.Category;
import com.agri.model.State;
import com.agri.model.District;
import com.agri.model.Taluka;
import com.agri.model.Village;
import com.agri.repository.AgripreneurRepository;
import com.agri.repository.CategoryRepository;
import com.agri.repository.StateRepository;
import com.agri.repository.DistrictRepository;
import com.agri.repository.TalukaRepository;
import com.agri.repository.VillageRepository;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class AgripreneurService {

    @Autowired
    private AgripreneurRepository agripreneurRepository;
    
    @Autowired
    private CategoryRepository categoryRepository;
    
    @Autowired
    private StateRepository stateRepository;
    
    @Autowired
    private DistrictRepository districtRepository;
    
    @Autowired
    private TalukaRepository talukaRepository;
    
    @Autowired
    private VillageRepository villageRepository;

    public Agripreneur saveAgripreneur(AgripreneurRegistrationDto registrationDto) {
        if (registrationDto.getCategoryId() == null) {
            throw new IllegalArgumentException("Category ID must not be null");
        }
        if (registrationDto.getStateId() == null) {
            throw new IllegalArgumentException("State ID must not be null");
        }
        if (registrationDto.getDistrictId() == null) {
            throw new IllegalArgumentException("District ID must not be null");
        }
        if (registrationDto.getTalukaId() == null) {
            throw new IllegalArgumentException("Taluka ID must not be null");
        }
        if (registrationDto.getVillageId() == null) {
            throw new IllegalArgumentException("Village ID must not be null");
        }
        
        Agripreneur agripreneur = new Agripreneur();
        agripreneur.setName(registrationDto.getName());
        agripreneur.setIdNo(registrationDto.getIdNo());
        agripreneur.setVentureName(registrationDto.getVentureName());
        agripreneur.setServiceCost(registrationDto.getServiceCost());
        agripreneur.setPincode(registrationDto.getPincode());
        agripreneur.setMobileNumber(registrationDto.getMobileNumber());
        agripreneur.setLandlineNumber(registrationDto.getLandlineNumber());
        agripreneur.setEmail(registrationDto.getEmail());
        agripreneur.setNtiName(registrationDto.getNtiName());
        agripreneur.setLatitude(registrationDto.getLatitude());
        agripreneur.setLongitude(registrationDto.getLongitude());
        agripreneur.setRestrictedInfo(registrationDto.getRestrictedInfo());
        agripreneur.setAnnualTurnover(registrationDto.getAnnualTurnover());
        agripreneur.setAnnualIncome(registrationDto.getAnnualIncome());
        agripreneur.setPersonsEmployed(registrationDto.getPersonsEmployed());
        agripreneur.setFarmersCovered(registrationDto.getFarmersCovered());
        agripreneur.setVillagesCovered(registrationDto.getVillagesCovered());
        agripreneur.setBankLoan(registrationDto.getBankLoan());
        agripreneur.setSubsidy(registrationDto.getSubsidy());
        agripreneur.setKeywords(registrationDto.getKeywords());
        
        // Fetch and set Category
        Optional<Category> optionalCategory = categoryRepository.findById(registrationDto.getCategoryId());
        if (optionalCategory.isPresent()) {
            agripreneur.setServiceCategory(optionalCategory.get());
        } else {
            throw new RuntimeException("Category not found");
        }
        
        // Fetch and set State
        Optional<State> optionalState = stateRepository.findById(registrationDto.getStateId());
        if (optionalState.isPresent()) {
            agripreneur.setState(optionalState.get());
        } else {
            throw new RuntimeException("State not found");
        }
        
        // Fetch and set District
        Optional<District> optionalDistrict = districtRepository.findById(registrationDto.getDistrictId());
        if (optionalDistrict.isPresent()) {
            agripreneur.setDistrict(optionalDistrict.get());
        } else {
            throw new RuntimeException("District not found");
        }
        
        // Fetch and set Taluka
        Optional<Taluka> optionalTaluka = talukaRepository.findById(registrationDto.getTalukaId());
        if (optionalTaluka.isPresent()) {
            agripreneur.setTaluka(optionalTaluka.get());
        } else {
            throw new RuntimeException("Taluka not found");
        }
        
        // Fetch and set Village
        Optional<Village> optionalVillage = villageRepository.findById(registrationDto.getVillageId());
        if (optionalVillage.isPresent()) {
            agripreneur.setVillage(optionalVillage.get());
        } else {
            throw new RuntimeException("Village not found");
        }

        return agripreneurRepository.save(agripreneur);
    }
}
